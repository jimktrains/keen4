# W                   E
# 
#       S     S     S
#  |==A==|==B==|==C==|
#   S     S     S

# types
@Block               := Eastbound + Westbound + Empty + Unknown
@Direction           := East + West
@SignalIndication    := Clear + Approach + Stop

BlockA : Block
BlockB : Block
BlockC : Block

Signal_AWb : SignalIndication
Signal_AEb : SignalIndication
Signal_BWb : SignalIndication
Signal_BEb : SignalIndication
Signal_CWb : SignalIndication
Signal_CEb : SignalIndication

# facts
connected(BlockA, East, West, BlockB)
connected(BlockB, East, West, BlockC)

protects(BlockA, West, Signal_AWb)
protects(BlockA, East, Signal_AEb)

protects(BlockB, West, Signal_BWb)
protects(BlockB, East, Signal_BEb)

protects(BlockC, West, Signal_CWb)
protects(BlockC, East, Signal_CEb)


# predicates
ApproachOrMoreRestrictive($S) := Approach($S) | Stop($S)
ClearOrMoreRestrictive($S)    := Clear($S) | ApproachOrMoreRestrictive($S)
Occupied($B)                  := Eastbound($B) | Westbound($B)

# constraints
@title 49 CFR ยง 236.205 (a) Signal control circuits
Occupied($A) & protects($A, $D, $S) => Stop($S)

@title 49 CFR ยง 236.204 Track signaled for movements in both directions
Empty($A) & 
  connected($A, $DAB, $DBA, $B) & 
  Occupied($B) & 
  protects($A, $DBA, $SBA) &
  protects($A, $DAB, $SAB) 
  => 
  ApproachOrMoreRestrictive($SBA) &
  Stop($SAB)

Empty($A) & 
  connected($A, $DAB, $DBA, $B) & 
  Empty($B) & 
  protects($A, $DBA, $SBA) &
  protects($A, $DAB, $SAB) 
  => 
  ClearOrMoreRestrictive($SBA) &
  ClearOrMoreRestrictive($SAB)

# marks terms as able to be solved for to satisfy constraints e.g.:
#
# Given:
#   Eastbound(A)
#   Empty(B)
#   Empty(C)
#   Clear(Signal_AWb)
#   Clear(Signal_AEb)
#   Clear(Signal_BWb)
#   Clear(Signal_BEb)
#   Clear(Signal_CWb)
#   Clear(Signal_CEb)
#
# After solving:
#   Occupied(A)
#   Empty(B)
#   Empty(C)
#   Stop(Signal_AWb)
#   Stop(Signal_AEb)
#   Approach(Signal_BWb)
#   Stop(Signal_BEb)
#   Clear(Signal_CWb)
#   Clear(Signal_CEb)
#
_solvable(Signal_AWb)
_solvable(Signal_AEb)
_solvable(Signal_BWb)
_solvable(Signal_BEb)
_solvable(Signal_CWb)
_solvable(Signal_CEb)

_definable(BlockA)
_definable(BlockB)
_definable(BlockC)

# The output of
#   keen4 simple_blocks.keen4
# Should be a cpp and hpp file with the hpp being something like:
#   enum class Block {
#     Eastbound,
#     Westbound,
#     Unknown
#   };
#   enum class SignalIndication {
#     Clear,
#     Approach,
#     Stop
#   };
#   struct simple_blocks_input_state {
#     Block BlockA,
#     Block BlockB,
#     Block BlockC
#   };
#
#   struct simple_blocks_output_state {
#     SignalIndication Signal_AWb;
#     SignalIndication Signal_AEb;
#     SignalIndication Signal_BWb;
#     SignalIndication Signal_BEb;
#     SignalIndication Signal_CWb;
#     SignalIndication Signal_CEb;
#   };
#
#   class simple_blocks {
#     public:
#       simple_blocks_output_state solve(simple_blocks_input_state input);
#   };
