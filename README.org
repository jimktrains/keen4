* keen4: A language for control systems

A means of defining constraints for use in control systems.

Ideally it'd be possible to write relativly complex discrete control systems
in a safe and sanity-perserving way. This means no manual memory managment,
no garbage collection, no unbounded operations beyond the main event loop,
constraints on memory, constraints on processing power, and hard-realtime
deadlines.

(N.B.: the goal of being able to work with hard-realtime deadlines means that
"constraints on processing power" does not mean "as fast as possible", but
"as fast as consistently possible".)

Since this is a relatively complex project I'll never actually be able
to complete, I figured I'd break it down into chunks that might be somewhat
doable. In the spirit of
[[https://www.cis.upenn.edu/~bcpierce/papers/fj-toplas.pdf][Featherweight
Java]] and [[https://arxiv.org/pdf/2005.11710.pdf][Featherweight Go]], those
chunks are named after boxing weight classes.

- [[#flyweight][Flyweight]] - Basic logical deductions
- [[#bantamweight][Bantamweight]] - Algebraic Types and First Order Logic
- [[#featherweight][Featherweight]] - Polymorphism and functions, no recursion
- [[#lightweight][Lightweight]] - Dependent types and recursion
- [[#welterweight][Welterweight]] - Structural Typing
- [[#middleweight][Middleweight]] - Substructural Typing
- [[#cruiserweight][Cruiserweight]] - Integers
- [[#heavyweight][Heavyweight]] - Device Setup and Optimizations

There are, however, things that will need to be done in a seperate
initiative, mainly real-time constraints inforced via worst-case cycle
counts. Also floating point. Floating point gets into this area of language
features that may be processor dependent, and not just parameters like "max stack
size", so I would like to give them careful thought only once I have a
language to actually think about. (Ditto for BCD numbers and all
multiplication and division.)

* Flyweight
#+BEGIN_COMMENT
So, apparently org-ruby doesn't do links properly and the only way to do an
internal link is to  "guess" the anchor that's going to be generated. For
some semblance of sanity, though, I'm still going to define those anchors.
See https://gist.github.com/will-henney/d8564133e07e546789c0 which is from
_2014_ -_-
#+END_COMMENT
:PROPERTIES:
:CUSTOM_ID: flyweight
:END:
** Goals
*** Boolean Variables
*** Constraints
The clauses in the constraint are "AND"ed together. E.g.
#+BEGIN_SRC
x
y
#+END_SRC
is "x AND y" while

#+BEGIN_SRC
x + y
z
#+END_SRC
is "(x XOR y) AND z". Internally this will be converted into
    [[https://en.wikipedia.org/wiki/Conjunctive_normal_form][CNF]].

Supported operations are & (and), + (xor), | (or), ~ (not), -> (consequence),
    <-> (biconditional).

The set of constraints must be proven solvable at compile-time for all
inputs.

Bound variables are ones that are set by/bound to a constraint.

Free variables appear within a constraint, but not changed by it.

Can we flag/warn redundant constraints?

Bound variables that are/end-up-being/shown-to-be tautologies or
contradictions are disallowed. E.g. If a bound variable is always
`true` or `false` "what is it even doing"?

**** Solver

A full SAT-solver feels a bit overkill for the size of inputs
this will normally see? It also feels like it might be difficult
to build one for systems big enough to require it, while also
fitting into a small memory footprint and running in a sensible
amount of bounded and known time.

A naïve solver (for all values of all free variables, check if
there exists a unique set of values for the bound variables) might
be the best approach out-the-gate. I'm not entirly sure that this
won't turn into a linear programming problem later on depending on
how these constraints get used, and besides, the naïve solver can
always be ripped out and replaced if need-be.

The compiler will try to condense the number of variables and clauses
given to the solver by condensing any sub-tree that doesn't contain a
bound variable into a single variable. Since these contain only free
variables, they are effectivly constant at solver time.

**** Transactions
Transactions allow for the setting of variables that need to be computed
from the constraints. Transactions must be provably solvable with a unique
solution.

All bound variables affected by the free variables set in the transaction
must be set by the transaction. Bound variables may not be referenced inside
of a transaction. Interupts are disabled during transactions. If/when
muti-core support is provided, access to all free and bound variables will
need to happen via a mutex (or maybe even some version of MVCC?).

*** Translation to C
To simplify writing the backend, the code will be translated to C in
order to be compiled into an executable. This will make it easy for me
to inspect the output at first. While codegen is one of the last tasks
in the document, I'd like to address it sooner if possible. The C backend
will always exist, but may not support things like deadlines and interrupts
with an approximate frequency.

*** "Magic" IN and OUT vars
To simplify testing, the IN and OUT vars will read from STDIN and write to
STDOUT as the appropriate. These will be removed once I get to working on
codegen and have a means of setting up a serial port (or mocking some
similar interface in C).


** Samples
#+BEGIN_SRC
x := false
y := false
z := false

constraints(free=x,y; bound=z) {
 x + y + z
}

run {
  z <- transaction {
    x <- IN
    y <- IN
  }
  OUT <- z
}
#+END_SRC
* Bantamweight
:PROPERTIES:
:CUSTOM_ID: bantamweight
:END:
** Goals
*** Enums / Sum Types / match / ?
*** Structs / Product Types
*** Evaluate enum constraints and solve for free enum variables
*** Evaluate predicates and rules
This includes finding all applicable and intermediary predicates based
on the given facts.

Facts must be unqiue.

When predicate parameters are named, the names must always be used in
facts.

Only predicates declared can be used.

This should be roughly equivalent to First Order Logic.

** Samples
#+BEGIN_SRC

enum SignalIndication {
    Clear,
    Approach,
    Stop
}

struct Signal {
    SignalIndication
}


enum Occupancy {
    Unoccupied,
    Occupied,
    Unknown,
}

struct Track {
    Occupancy
}

enum SwitchDirection {
    Straight,
    Diverted,
    Unknown,
}

struct Switch {
      SwitchDirection
}


T1 <- Track{}
T2 <- Track{}
T3 <- Track{}
T4 <- Track{}

Sw1 <- Switch{}

Sg1 <- Signal{}

predicates {
    connected(Track, Track)
    protects(Signal, Track)
    connected_via_switch(Track, Switch, _Straigt: Track, _Diverted: Track)
}
rules {
    connected($TA, $TB) :- connected_via($TA, $SW, $TB, $TC) & SwitchDirection::Straight($SW)
    connected($TA, $TC) :- connected_via($TA, $SW, $TB, $TC) & SwitchDirection::Diverted($SW)
    connected($TA, $TB) :- connected($TB, $A)

}
facts {
    connected(T1, T2)
    connected_via(T2, Sw1, _Straigt=T3, _Diverted=T4)
    protects(Sg1, T2)
}
constraints (free=T1,T2,T3,T4,Sw1;bound=Sg1) {
    Occupied($T) & protects($SG, $T) -> Stop($SG)
    Occupied($TA) & connected($TA, $TB) & protects($SG, $TB) & ~Stop($SG) -> Approach($SG)
}
run {
    Sg1 = transaction {
        T1.Occupancy <- IN
        T2.Occupancy <- IN
        T3.Occupancy <- IN
        T4.Occupancy <- IN
        Sw1.SwitchDirection <- IN
    }
    # Like Prolog, if, for instance
    #   Unoccupied(T1)
    #   Unoccupied(T2)
    #   Occupancy(T3)
    #   Unoccupied(T4)
    #   Straight(Sw1)
    # then, the system will be expected to figure out that...
    #
    #
    # connected(T2, $TB) :- connected_via(T2, $SW, $TB, $TC) & SwitchDirection::Straight($SW)
    # connected(T2, $TC) :- connected_via(T2, $SW, $TB, $TC) & SwitchDirection::Diverted($SW)
    #
    # connected(T2, $TB) :- connected_via(T2, Sg1, T3, T4) & SwitchDirection::Straight(Sg1)
    # connected(T2, $TC) :- connected_via(T2, Sg1, T3, T4) & SwitchDirection::Diverted(Sg1)
    #
    # connected(T2, T3) :- connected_via(T1, Sg1, T3, T4) & SwitchDirection::Straight(Sg1)
    #
    # connected(T3, $TB) :- connected($TB, T3)
    #
    # connected(T3, T2) :- connected(T2, T3)
    #
    # Occupied(T3) & protects($SG, $T) -> Stop($SG)
    # Occupied(T3) & connected(T3, $TB) & protects($SG, $TB) & ~Stop($SG) -> Approach($SG)
    #
    # There are no fact that match protects($SG, T3) and so it gets dropped
    # Occupied(T3) & connected(T3, T2) & protects($SG, T2) & ~Stop($SG) -> Approach($SG)
    #
    # Occupied(T3) & connected(T3, T2) & protects(Sg1, T2) & ~Stop(Sg1) -> Approach(Sg1)
    #
    # Since, Stop(Sg1) isn't backed by any fact or rule, ~Stop(Sg1) is true.
    # Since, Sg1, is a free variable, this roughly becomes:
    #   What value of Sg1 could make true -> Approach(Sg1)
    # and so, a value for the Indication of Sg1 is set to Approach to make
    # the constraint true.
}
#+END_SRC
* Featherweight
:PROPERTIES:
:CUSTOM_ID: featherweight
:END:
** Goals
*** Local variables
Variable shadowing is disallowed.
*** Structs
*** Traits
*** Polymorphic functions
Recursion is disallowed in this version as it cannot be known if it will terminate.
*** Nominal Type System
*** Table Lookup Functions
This would only work with enum types, and very similar to how matching
does.
#+BEGIN_SRC
enum State {
      Moving,
      Stop,
}

enum Input1 {
      None,
      Accelerator,
      Brake,
}
table next_state(c: State, i: Input1) -> o: State {
      | c      | i           || o      |
      +---------------------------------
      | Moving | Break       || Stop   |
      | Moving | _           || Moving |
      | Stop   | Accelerator || Moving |
      | Stop   | _           || Stop   |
}
#+END_SRC
*** Integer addition and subtraction
**** Integer Types:
    - Signed
    - Unsigned
    - Wrapped Signed
    - Wrapped Unsigned
    - Saturated Signed
    - Saturated Unsigned
#+BEGIN_SRC
si sint8

si <- match si <-? 129 {
      Some(x): x
      Err(_): 5
}
# si = 5

ss <-?? 129 # returns the error from the function

ui uint8
si <- match si <-? -1 {
      Some(x): x
      Err(_): 5
}
# si = 5

ss <-?? -1 # returns the error from the function

wsi wsint8
wsi <- 129 # -127

wui wuint8
wui <- -1 # 255

ssi ssint8
ssi <- 129 # 127
sui suint8
sui <- -1 # 0
#+END_SRC
** Samples
#+BEGIN_SRC

// <, >, =, <=, and >= will be infered.
// Returning None will cause those to return false.
trait Comparable[[_T]] {
   fn op<=>(x: _T, y: _T) => Trichotomy?
}

struct Point[[_V]] {
   x: _V
   y: _V
}

impl Comparable[[Point]] {
   // It's an ordering, anyway
   fn op<=>(a: Point, b: Point) => Trichotomy? {
      if a.x < b.y {
          Trichotomy::LessThan
      } elif a.y < b.y {
          Trichotomy::GreaterThan
      } else {
          Trichotomy::Equal
      }
   }
}

run {
   p1 <- Point{x <- 1, y <- 2}
   p2 <- Point{x <- 2, x <- 1}
   match p1 <=> p2 {
      Trichotomy::LessThan {
          OUT <- False
          OUT <- True
      }
      Trichotomy::GreaterThan {
          OUT <- True
          OUT <- False
      }
      Trichotomy::Equal {
          OUT <- True
          OUT <- True
      }
      None {
          OUT <- False
          OUT <- False
      }
   }
}
#+END_SRC
* Lightweight
:PROPERTIES:
:CUSTOM_ID: lightweight
:END:
** Goals
*** Dependently typed functions, methods, and structs with bounded recursion
*** Tail Call Optimization
*** Arrays
Arrays can be viewed as a special case of a dependently typed structure, but
with some additional syntax for accessing elements directly without
having to recurse through the structure.
#+BEGIN_SRC
struct[[_T, #N]] Array{
    v T
    rest Array[[#T, #_P(#N)]]
}
struct[[_T, 0]] Array{
    v _T
}

fn map(a: Array[[_T, #N]], f: _T -> _S) -> Array[[_S, #N]] {
    match #N {
      0 => Array{v <- f(a.v)}
      _ => Array{v <- f(a.v), rest <- map(a.rest, f)}
    }
}

fn fib[[#N]] -> (int, int) {
    match #N {
      0      => 1, 0
      #_S(0) => 1, 1
      _      => {
            x, y <- fib[[#_P(#N)]]
            # This would ideally be TCO since it only depends on the result
            # of the function call.
            x + y, x
          }
    }
}
#+END_SRC
* Welterweight
:PROPERTIES:
:CUSTOM_ID: welterweight
:END:
** Goals
*** Structural type system for traits and structs
* Middleweight
:PROPERTIES:
:CUSTOM_ID: middleweight
:END:
** Goals
*** Linear type system
*** Array slices
Slices fall in with the lineary type system as they allow access a
segment of memory without allowing for it to be modified.
* Cruiserweight
:PROPERTIES:
:CUSTOM_ID: cruiserweight
:END:
** Goals
*** Byte type
*** Feature flags providable by library or compiler
**** Fixed-Point Types
    - Signed
    - Unsigned
    - Wrapped Signed
    - Wrapped Unsigned
    - Saturated Signed
    - Saturated Unsigned
**** BCD Types
    - Signed
    - Unsigned
    - Wrapped Signed
    - Wrapped Unsigned
    - Saturated Signed
    - Saturated Unsigned
**** Integer multiplication and division
**** Fixed-Point Types with Accumulated Error Bounds
**** Floating-point types
**** Floating-point types with Accumulated Error Bounds
*** Integer ranges and constraints
    Range constraints may be declared on an integer type. For signed and
    unsigned integers, on each assignment,
    an Option is returned, with None representing an out-of-bounds value. For
    Saturated integers, the maximal or minimal end of the range is returned.

#+BEGIN_SRC
x uint8[0,10)
y suint[0,10)
z wuint[0,10)

x <- match x <-? 11 {
    case Some(x): x
    case Err(_): 5
}

x <-?? 12 # Returns the error from the function

x <-?? 5

y <- 12 # y = 9

z <- 12 # y = 2

# Use in function signatures
fn UpdateDisplay(msgs byte[16][N], msg_idx uint[0, N)) {

}

fn
#+END_SRC
*** Units
    Integer types may be qualified by a unit. Units may only be added or
    subtracted from compatible units. Any units may be multiplied and
    divided. You may define new units.
#+BEGIN_SRC
    g <- -32.17405:ft/(sec*sec)
    speed_0 <- 1:ft/sec
    speed_2 <- speed_0 + g * 2:sec
    pos_0 <- 100:ft
    pos_2 <- pos_0 + (speed_0 * 2:sec) + ((1/2) * g * (2:sec * 2:sec))

    unit position
    x <- PORTB::uint8:position
    ppd <- 128/360:position/deg
    deg_turned <- x / ppd
#+END_SRC
* Heavyweight
:PROPERTIES:
:CUSTOM_ID: heavyweight
:END:
** Goals
*** Code-gen
**** Parts
***** Instruction Generator
      Requires:
      - Instruction Set Architecture
      - Register map
      - I/O Memory Map
      - Feature Flag Libraries
***** Constraint enforcement
      Requires:
        - ISA
        - Clock Frequency
        - RAM size
**** Goals
    - ATmega328 (avr5)
    - ATtiny85 (avr2.5)
    - STM32F3 (Cortex ®-M4 (with FPU and DSP instructions))
    - Freedom E310 (RV32I+M+A)
    - STM32F0 (Cortex ®-M0)
*** Memory-mapped I/O
    For system initialization and general I/O
*** Annotations
    Annotations can add additional information for documentation or for the
    compiler.

    - ~@ref~ :: Generic reference text. May be placed multiple times.
    - ~@interrupt~ :: Interrupt handler for the given interrupt (or signal on
      a *nix system). Programs may not have interrupts and deadlines.
    - ~@timer~ :: Special case of ~@interrupt~ that can set the timer as well
    - ~@approximate-frequency~ :: Approximate frequency this interrupt handler is
      expected to execute at. This is used to build execution constraints on
      transactions. May only be declared once per function. Requires ~@interrupt~.
    - ~@deadline~ :: Deadline for when this function call needs to be made
      again. Programs may not have interrupts and deadlines.
#+BEGIN_SRC
constraints {
      @ref Title 49 CFR § 236.205 (a) Signal control circuits
      Occupied($A) & protects($A, _, $S) => Stop($S)
}

const usi1_baud 9600:baud

@interrupt USI_OVF
# These are all equivilent
@approximate-frequency 833:usec
@approximate-frequency 833:μsec
@approximate-frequency 0.833:msec
@approximate-frequency 0.000833:sec
@approximate-frequency 1200:Hz
@approximate-frequency 1.2:kHz
@approximate-frequency (usi1_baud * 1:byte)
fn read_usart() {
}
#+END_SRC
