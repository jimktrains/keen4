enum SignalIndication:
  Clear
  Approach
  Stop

enum OccupancyDetector:
  Empty
  Occupied

# Statements are what will later be used to define facts.
# the spaceship operator (<=>) can be used to define a reflexive
# relationship.
statements:
  connected(A, B) <=> connected(B, A)
  signal_protects(S, A)

# These are checked at compile-time against the reäctive definitions. As
# the set values can not be set elsewhere, verification there is sufficient.
# It also ensures that any state being watch is capable of being attained.
#
# Since the reäctive section must be exustive, it should not be possible
# to set a state with the free variables that is not matched against.
constraints:
  Occupied(A) & signal_protects(S, A) -> Stop(S)

# Only simple assignment is permitted in the body.
# Assigned variables may not be assigned to outside of the reäctive section.
reäctive:
  Occupied(_A) & signal_protects(_S, _A):
    _S := Stop
  connected(_A, _B) & Empty(_A) & Occupied(_B) & signal_protects(_S, _A):
    _S := Approach
  connected(_A, _B) & Empty(_A) & Empty(_B) & signal_protects(_S, _A):
    _S := Clear

# Track Sections
#    A      B      C
# ------|------|------
# S      S      S
# Signal Locations

OccupancyDetector A
OccupancyDetector B
OccupancyDetector C
SignalIndication SA
SignalIndication SB
SignalIndication SC

# Once we declare these facts, the signals may not be assigned to elsewhere
# in the code because they are implicated in the reäctive section.
facts:
  connected(A, B)
  connected(B, C)
  signal_protects(SA, A)
  signal_protects(SB, B)
  signal_protects(SC, C)

